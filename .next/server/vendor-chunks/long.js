/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/long";
exports.ids = ["vendor-chunks/long"];
exports.modules = {

/***/ "(rsc)/./node_modules/long/umd/index.js":
/*!****************************************!*\
  !*** ./node_modules/long/umd/index.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// GENERATED FILE. DO NOT EDIT.\r\n(function (global, factory) {\r\n  function preferDefault(exports) {\r\n    return exports.default || exports;\r\n  }\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\r\n      var exports = {};\r\n      factory(exports);\r\n      return preferDefault(exports);\r\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n  } else {}\r\n})(\r\n  typeof globalThis !== \"undefined\"\r\n    ? globalThis\r\n    : typeof self !== \"undefined\"\r\n      ? self\r\n      : this,\r\n  function (_exports) {\r\n    \"use strict\";\r\n\r\n    Object.defineProperty(_exports, \"__esModule\", {\r\n      value: true,\r\n    });\r\n    _exports.default = void 0;\r\n    /**\r\n     * @license\r\n     * Copyright 2009 The Closure Library Authors\r\n     * Copyright 2020 Daniel Wirtz / The long.js Authors.\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *     http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     *\r\n     * SPDX-License-Identifier: Apache-2.0\r\n     */\r\n\r\n    // WebAssembly optimizations to do native i64 multiplication and divide\r\n    var wasm = null;\r\n    try {\r\n      wasm = new WebAssembly.Instance(\r\n        new WebAssembly.Module(\r\n          new Uint8Array([\r\n            // \\0asm\r\n            0, 97, 115, 109,\r\n            // version 1\r\n            1, 0, 0, 0,\r\n            // section \"type\"\r\n            1, 13, 2,\r\n            // 0, () => i32\r\n            96, 0, 1, 127,\r\n            // 1, (i32, i32, i32, i32) => i32\r\n            96, 4, 127, 127, 127, 127, 1, 127,\r\n            // section \"function\"\r\n            3, 7, 6,\r\n            // 0, type 0\r\n            0,\r\n            // 1, type 1\r\n            1,\r\n            // 2, type 1\r\n            1,\r\n            // 3, type 1\r\n            1,\r\n            // 4, type 1\r\n            1,\r\n            // 5, type 1\r\n            1,\r\n            // section \"global\"\r\n            6, 6, 1,\r\n            // 0, \"high\", mutable i32\r\n            127, 1, 65, 0, 11,\r\n            // section \"export\"\r\n            7, 50, 6,\r\n            // 0, \"mul\"\r\n            3, 109, 117, 108, 0, 1,\r\n            // 1, \"div_s\"\r\n            5, 100, 105, 118, 95, 115, 0, 2,\r\n            // 2, \"div_u\"\r\n            5, 100, 105, 118, 95, 117, 0, 3,\r\n            // 3, \"rem_s\"\r\n            5, 114, 101, 109, 95, 115, 0, 4,\r\n            // 4, \"rem_u\"\r\n            5, 114, 101, 109, 95, 117, 0, 5,\r\n            // 5, \"get_high\"\r\n            8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,\r\n            // section \"code\"\r\n            10, 191, 1, 6,\r\n            // 0, \"get_high\"\r\n            4, 0, 35, 0, 11,\r\n            // 1, \"mul\"\r\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\r\n            32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0,\r\n            32, 4, 167, 11,\r\n            // 2, \"div_s\"\r\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\r\n            32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0,\r\n            32, 4, 167, 11,\r\n            // 3, \"div_u\"\r\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\r\n            32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0,\r\n            32, 4, 167, 11,\r\n            // 4, \"rem_s\"\r\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\r\n            32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0,\r\n            32, 4, 167, 11,\r\n            // 5, \"rem_u\"\r\n            36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173,\r\n            32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0,\r\n            32, 4, 167, 11,\r\n          ]),\r\n        ),\r\n        {},\r\n      ).exports;\r\n    } catch {\r\n      // no wasm support :(\r\n    }\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n      /**\r\n       * The low 32 bits as a signed value.\r\n       * @type {number}\r\n       */\r\n      this.low = low | 0;\r\n\r\n      /**\r\n       * The high 32 bits as a signed value.\r\n       * @type {number}\r\n       */\r\n      this.high = high | 0;\r\n\r\n      /**\r\n       * Whether unsigned or not.\r\n       * @type {boolean}\r\n       */\r\n      this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @private\r\n     */\r\n    Long.prototype.__isLong__;\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n      value: true,\r\n    });\r\n\r\n    /**\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @inner\r\n     */\r\n    function isLong(obj) {\r\n      return (obj && obj[\"__isLong__\"]) === true;\r\n    }\r\n\r\n    /**\r\n     * @function\r\n     * @param {*} value number\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    function ctz32(value) {\r\n      var c = Math.clz32(value & -value);\r\n      return value ? 31 - c : c;\r\n    }\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     */\r\n    Long.isLong = isLong;\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromInt(value, unsigned) {\r\n      var obj, cachedObj, cache;\r\n      if (unsigned) {\r\n        value >>>= 0;\r\n        if ((cache = 0 <= value && value < 256)) {\r\n          cachedObj = UINT_CACHE[value];\r\n          if (cachedObj) return cachedObj;\r\n        }\r\n        obj = fromBits(value, 0, true);\r\n        if (cache) UINT_CACHE[value] = obj;\r\n        return obj;\r\n      } else {\r\n        value |= 0;\r\n        if ((cache = -128 <= value && value < 128)) {\r\n          cachedObj = INT_CACHE[value];\r\n          if (cachedObj) return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache) INT_CACHE[value] = obj;\r\n        return obj;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @function\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromInt = fromInt;\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromNumber(value, unsigned) {\r\n      if (isNaN(value)) return unsigned ? UZERO : ZERO;\r\n      if (unsigned) {\r\n        if (value < 0) return UZERO;\r\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\r\n      } else {\r\n        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\r\n      }\r\n      if (value < 0) return fromNumber(-value, unsigned).neg();\r\n      return fromBits(\r\n        value % TWO_PWR_32_DBL | 0,\r\n        (value / TWO_PWR_32_DBL) | 0,\r\n        unsigned,\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @function\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromNumber = fromNumber;\r\n\r\n    /**\r\n     * @param {number} lowBits\r\n     * @param {number} highBits\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromBits(lowBits, highBits, unsigned) {\r\n      return new Long(lowBits, highBits, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @function\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromBits = fromBits;\r\n\r\n    /**\r\n     * @function\r\n     * @param {number} base\r\n     * @param {number} exponent\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n    /**\r\n     * @param {string} str\r\n     * @param {(boolean|number)=} unsigned\r\n     * @param {number=} radix\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromString(str, unsigned, radix) {\r\n      if (str.length === 0) throw Error(\"empty string\");\r\n      if (typeof unsigned === \"number\") {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned;\r\n        unsigned = false;\r\n      } else {\r\n        unsigned = !!unsigned;\r\n      }\r\n      if (\r\n        str === \"NaN\" ||\r\n        str === \"Infinity\" ||\r\n        str === \"+Infinity\" ||\r\n        str === \"-Infinity\"\r\n      )\r\n        return unsigned ? UZERO : ZERO;\r\n      radix = radix || 10;\r\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\r\n      var p;\r\n      if ((p = str.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\r\n      else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n      }\r\n\r\n      // Do several (8) digits each time through the loop, so as to\r\n      // minimize the calls to the very expensive emulated div.\r\n      var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n      var result = ZERO;\r\n      for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n          value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n          var power = fromNumber(pow_dbl(radix, size));\r\n          result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n          result = result.mul(radixToPower);\r\n          result = result.add(fromNumber(value));\r\n        }\r\n      }\r\n      result.unsigned = unsigned;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @function\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromString = fromString;\r\n\r\n    /**\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromValue(val, unsigned) {\r\n      if (typeof val === \"number\") return fromNumber(val, unsigned);\r\n      if (typeof val === \"string\") return fromString(val, unsigned);\r\n      // Throws for non-objects, converts non-instanceof Long:\r\n      return fromBits(\r\n        val.low,\r\n        val.high,\r\n        typeof unsigned === \"boolean\" ? unsigned : val.unsigned,\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Converts the specified value to a Long using the appropriate from* function for its type.\r\n     * @function\r\n     * @param {!Long|number|bigint|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @returns {!Long}\r\n     */\r\n    Long.fromValue = fromValue;\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ZERO = fromInt(0);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.ZERO = ZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UZERO = fromInt(0, true);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.UZERO = UZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ONE = fromInt(1);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     */\r\n    Long.ONE = ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UONE = fromInt(1, true);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     */\r\n    Long.UONE = UONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var NEG_ONE = fromInt(-1);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     */\r\n    Long.NEG_ONE = NEG_ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_VALUE = fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_VALUE = MAX_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_UNSIGNED_VALUE = fromBits(0xffffffff | 0, 0xffffffff | 0, true);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MIN_VALUE = MIN_VALUE;\r\n\r\n    /**\r\n     * @alias Long.prototype\r\n     * @inner\r\n     */\r\n    var LongPrototype = Long.prototype;\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @this {!Long}\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toInt = function toInt() {\r\n      return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @this {!Long}\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toNumber = function toNumber() {\r\n      if (this.unsigned)\r\n        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\r\n      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @this {!Long}\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     */\r\n    LongPrototype.toString = function toString(radix) {\r\n      radix = radix || 10;\r\n      if (radix < 2 || 36 < radix) throw RangeError(\"radix\");\r\n      if (this.isZero()) return \"0\";\r\n      if (this.isNegative()) {\r\n        // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n          // We need to change the Long value before it can be negated, so we remove\r\n          // the bottom-most digit in this base and then recurse to do the rest.\r\n          var radixLong = fromNumber(radix),\r\n            div = this.div(radixLong),\r\n            rem1 = div.mul(radixLong).sub(this);\r\n          return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else return \"-\" + this.neg().toString(radix);\r\n      }\r\n\r\n      // Do several (6) digits each time through the loop, so as to\r\n      // minimize the calls to the very expensive emulated div.\r\n      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n      var result = \"\";\r\n      while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n          digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero()) return digits + result;\r\n        else {\r\n          while (digits.length < 6) digits = \"0\" + digits;\r\n          result = \"\" + digits + result;\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @this {!Long}\r\n     * @returns {number} Signed high bits\r\n     */\r\n    LongPrototype.getHighBits = function getHighBits() {\r\n      return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @this {!Long}\r\n     * @returns {number} Unsigned high bits\r\n     */\r\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n      return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @this {!Long}\r\n     * @returns {number} Signed low bits\r\n     */\r\n    LongPrototype.getLowBits = function getLowBits() {\r\n      return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @this {!Long}\r\n     * @returns {number} Unsigned low bits\r\n     */\r\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n      return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @this {!Long}\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n      if (this.isNegative())\r\n        // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n      var val = this.high != 0 ? this.high : this.low;\r\n      for (var bit = 31; bit > 0; bit--) if ((val & (1 << bit)) != 0) break;\r\n      return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long can be safely represented as a JavaScript number.\r\n     * @this {!Long}\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isSafeInteger = function isSafeInteger() {\r\n      // 2^53-1 is the maximum safe value\r\n      var top11Bits = this.high >> 21;\r\n      // [0, 2^53-1]\r\n      if (!top11Bits) return true;\r\n      // > 2^53-1\r\n      if (this.unsigned) return false;\r\n      // [-2^53, -1] except -2^53\r\n      return top11Bits === -1 && !(this.low === 0 && this.high === -0x200000);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @this {!Long}\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isZero = function isZero() {\r\n      return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.eqz = LongPrototype.isZero;\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @this {!Long}\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isNegative = function isNegative() {\r\n      return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive or zero.\r\n     * @this {!Long}\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isPositive = function isPositive() {\r\n      return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @this {!Long}\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isOdd = function isOdd() {\r\n      return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @this {!Long}\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isEven = function isEven() {\r\n      return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.equals = function equals(other) {\r\n      if (!isLong(other)) other = fromValue(other);\r\n      if (\r\n        this.unsigned !== other.unsigned &&\r\n        this.high >>> 31 === 1 &&\r\n        other.high >>> 31 === 1\r\n      )\r\n        return false;\r\n      return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.eq = LongPrototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.notEquals = function notEquals(other) {\r\n      return !this.eq(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.neq = LongPrototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.ne = LongPrototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThan = function lessThan(other) {\r\n      return this.comp(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lt = LongPrototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n      return this.comp(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThan = function greaterThan(other) {\r\n      return this.comp(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n      return this.comp(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.compare = function compare(other) {\r\n      if (!isLong(other)) other = fromValue(other);\r\n      if (this.eq(other)) return 0;\r\n      var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n      if (thisNeg && !otherNeg) return -1;\r\n      if (!thisNeg && otherNeg) return 1;\r\n      // At this point the sign bits are the same\r\n      if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\r\n      // Both are positive if at least one is unsigned\r\n      return other.high >>> 0 > this.high >>> 0 ||\r\n        (other.high === this.high && other.low >>> 0 > this.low >>> 0)\r\n        ? -1\r\n        : 1;\r\n    };\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.comp = LongPrototype.compare;\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @this {!Long}\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.negate = function negate() {\r\n      if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\r\n      return this.not().add(ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.neg = LongPrototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     */\r\n    LongPrototype.add = function add(addend) {\r\n      if (!isLong(addend)) addend = fromValue(addend);\r\n\r\n      // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n      var a48 = this.high >>> 16;\r\n      var a32 = this.high & 0xffff;\r\n      var a16 = this.low >>> 16;\r\n      var a00 = this.low & 0xffff;\r\n      var b48 = addend.high >>> 16;\r\n      var b32 = addend.high & 0xffff;\r\n      var b16 = addend.low >>> 16;\r\n      var b00 = addend.low & 0xffff;\r\n      var c48 = 0,\r\n        c32 = 0,\r\n        c16 = 0,\r\n        c00 = 0;\r\n      c00 += a00 + b00;\r\n      c16 += c00 >>> 16;\r\n      c00 &= 0xffff;\r\n      c16 += a16 + b16;\r\n      c32 += c16 >>> 16;\r\n      c16 &= 0xffff;\r\n      c32 += a32 + b32;\r\n      c48 += c32 >>> 16;\r\n      c32 &= 0xffff;\r\n      c48 += a48 + b48;\r\n      c48 &= 0xffff;\r\n      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.subtract = function subtract(subtrahend) {\r\n      if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\r\n      return this.add(subtrahend.neg());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.sub = LongPrototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.multiply = function multiply(multiplier) {\r\n      if (this.isZero()) return this;\r\n      if (!isLong(multiplier)) multiplier = fromValue(multiplier);\r\n\r\n      // use wasm support if present\r\n      if (wasm) {\r\n        var low = wasm[\"mul\"](\r\n          this.low,\r\n          this.high,\r\n          multiplier.low,\r\n          multiplier.high,\r\n        );\r\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n      }\r\n      if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\r\n      if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n      if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\r\n      if (this.isNegative()) {\r\n        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\r\n        else return this.neg().mul(multiplier).neg();\r\n      } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n      // If both longs are small, use float multiplication\r\n      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(\r\n          this.toNumber() * multiplier.toNumber(),\r\n          this.unsigned,\r\n        );\r\n\r\n      // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n      // We can skip products that would overflow.\r\n\r\n      var a48 = this.high >>> 16;\r\n      var a32 = this.high & 0xffff;\r\n      var a16 = this.low >>> 16;\r\n      var a00 = this.low & 0xffff;\r\n      var b48 = multiplier.high >>> 16;\r\n      var b32 = multiplier.high & 0xffff;\r\n      var b16 = multiplier.low >>> 16;\r\n      var b00 = multiplier.low & 0xffff;\r\n      var c48 = 0,\r\n        c32 = 0,\r\n        c16 = 0,\r\n        c00 = 0;\r\n      c00 += a00 * b00;\r\n      c16 += c00 >>> 16;\r\n      c00 &= 0xffff;\r\n      c16 += a16 * b00;\r\n      c32 += c16 >>> 16;\r\n      c16 &= 0xffff;\r\n      c16 += a00 * b16;\r\n      c32 += c16 >>> 16;\r\n      c16 &= 0xffff;\r\n      c32 += a32 * b00;\r\n      c48 += c32 >>> 16;\r\n      c32 &= 0xffff;\r\n      c32 += a16 * b16;\r\n      c48 += c32 >>> 16;\r\n      c32 &= 0xffff;\r\n      c32 += a00 * b32;\r\n      c48 += c32 >>> 16;\r\n      c32 &= 0xffff;\r\n      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n      c48 &= 0xffff;\r\n      return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.mul = LongPrototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n     *  unsigned if this Long is unsigned.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.divide = function divide(divisor) {\r\n      if (!isLong(divisor)) divisor = fromValue(divisor);\r\n      if (divisor.isZero()) throw Error(\"division by zero\");\r\n\r\n      // use wasm support if present\r\n      if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (\r\n          !this.unsigned &&\r\n          this.high === -0x80000000 &&\r\n          divisor.low === -1 &&\r\n          divisor.high === -1\r\n        ) {\r\n          // be consistent with non-wasm code path\r\n          return this;\r\n        }\r\n        var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\r\n          this.low,\r\n          this.high,\r\n          divisor.low,\r\n          divisor.high,\r\n        );\r\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n      }\r\n      if (this.isZero()) return this.unsigned ? UZERO : ZERO;\r\n      var approx, rem, res;\r\n      if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n          if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n            return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\r\n          else if (divisor.eq(MIN_VALUE)) return ONE;\r\n          else {\r\n            // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n            var halfThis = this.shr(1);\r\n            approx = halfThis.div(divisor).shl(1);\r\n            if (approx.eq(ZERO)) {\r\n              return divisor.isNegative() ? ONE : NEG_ONE;\r\n            } else {\r\n              rem = this.sub(divisor.mul(approx));\r\n              res = approx.add(rem.div(divisor));\r\n              return res;\r\n            }\r\n          }\r\n        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n          if (divisor.isNegative()) return this.neg().div(divisor.neg());\r\n          return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n      } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned) divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this)) return UZERO;\r\n        if (divisor.gt(this.shru(1)))\r\n          // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n          return UONE;\r\n        res = UZERO;\r\n      }\r\n\r\n      // Repeat the following until the remainder is less than other:  find a\r\n      // floating-point that approximates remainder / other *from below*, add this\r\n      // into the result, and subtract it from the remainder.  It is critical that\r\n      // the approximate value is less than or equal to the real value so that the\r\n      // remainder never becomes negative.\r\n      rem = this;\r\n      while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\r\n          // Decrease the approximation until it is smaller than the remainder.  Note\r\n          // that if it is too large, the product overflows and is negative.\r\n          approxRes = fromNumber(approx),\r\n          approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n          approx -= delta;\r\n          approxRes = fromNumber(approx, this.unsigned);\r\n          approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero()) approxRes = ONE;\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n      }\r\n      return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.div = LongPrototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.modulo = function modulo(divisor) {\r\n      if (!isLong(divisor)) divisor = fromValue(divisor);\r\n\r\n      // use wasm support if present\r\n      if (wasm) {\r\n        var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\r\n          this.low,\r\n          this.high,\r\n          divisor.low,\r\n          divisor.high,\r\n        );\r\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n      }\r\n      return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.mod = LongPrototype.modulo;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|bigint|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.rem = LongPrototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @this {!Long}\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.not = function not() {\r\n      return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns count leading zeros of this Long.\r\n     * @this {!Long}\r\n     * @returns {!number}\r\n     */\r\n    LongPrototype.countLeadingZeros = function countLeadingZeros() {\r\n      return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\r\n    };\r\n\r\n    /**\r\n     * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\r\n     * @function\r\n     * @param {!Long}\r\n     * @returns {!number}\r\n     */\r\n    LongPrototype.clz = LongPrototype.countLeadingZeros;\r\n\r\n    /**\r\n     * Returns count trailing zeros of this Long.\r\n     * @this {!Long}\r\n     * @returns {!number}\r\n     */\r\n    LongPrototype.countTrailingZeros = function countTrailingZeros() {\r\n      return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\r\n    };\r\n\r\n    /**\r\n     * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\r\n     * @function\r\n     * @param {!Long}\r\n     * @returns {!number}\r\n     */\r\n    LongPrototype.ctz = LongPrototype.countTrailingZeros;\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.and = function and(other) {\r\n      if (!isLong(other)) other = fromValue(other);\r\n      return fromBits(\r\n        this.low & other.low,\r\n        this.high & other.high,\r\n        this.unsigned,\r\n      );\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.or = function or(other) {\r\n      if (!isLong(other)) other = fromValue(other);\r\n      return fromBits(\r\n        this.low | other.low,\r\n        this.high | other.high,\r\n        this.unsigned,\r\n      );\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @this {!Long}\r\n     * @param {!Long|number|bigint|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.xor = function xor(other) {\r\n      if (!isLong(other)) other = fromValue(other);\r\n      return fromBits(\r\n        this.low ^ other.low,\r\n        this.high ^ other.high,\r\n        this.unsigned,\r\n      );\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @this {!Long}\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n      if (isLong(numBits)) numBits = numBits.toInt();\r\n      if ((numBits &= 63) === 0) return this;\r\n      else if (numBits < 32)\r\n        return fromBits(\r\n          this.low << numBits,\r\n          (this.high << numBits) | (this.low >>> (32 - numBits)),\r\n          this.unsigned,\r\n        );\r\n      else return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @this {!Long}\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRight = function shiftRight(numBits) {\r\n      if (isLong(numBits)) numBits = numBits.toInt();\r\n      if ((numBits &= 63) === 0) return this;\r\n      else if (numBits < 32)\r\n        return fromBits(\r\n          (this.low >>> numBits) | (this.high << (32 - numBits)),\r\n          this.high >> numBits,\r\n          this.unsigned,\r\n        );\r\n      else\r\n        return fromBits(\r\n          this.high >> (numBits - 32),\r\n          this.high >= 0 ? 0 : -1,\r\n          this.unsigned,\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @this {!Long}\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n      if (isLong(numBits)) numBits = numBits.toInt();\r\n      if ((numBits &= 63) === 0) return this;\r\n      if (numBits < 32)\r\n        return fromBits(\r\n          (this.low >>> numBits) | (this.high << (32 - numBits)),\r\n          this.high >>> numBits,\r\n          this.unsigned,\r\n        );\r\n      if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\r\n      return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Returns this Long with bits rotated to the left by the given amount.\r\n     * @this {!Long}\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Rotated Long\r\n     */\r\n    LongPrototype.rotateLeft = function rotateLeft(numBits) {\r\n      var b;\r\n      if (isLong(numBits)) numBits = numBits.toInt();\r\n      if ((numBits &= 63) === 0) return this;\r\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\r\n      if (numBits < 32) {\r\n        b = 32 - numBits;\r\n        return fromBits(\r\n          (this.low << numBits) | (this.high >>> b),\r\n          (this.high << numBits) | (this.low >>> b),\r\n          this.unsigned,\r\n        );\r\n      }\r\n      numBits -= 32;\r\n      b = 32 - numBits;\r\n      return fromBits(\r\n        (this.high << numBits) | (this.low >>> b),\r\n        (this.low << numBits) | (this.high >>> b),\r\n        this.unsigned,\r\n      );\r\n    };\r\n    /**\r\n     * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Rotated Long\r\n     */\r\n    LongPrototype.rotl = LongPrototype.rotateLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits rotated to the right by the given amount.\r\n     * @this {!Long}\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Rotated Long\r\n     */\r\n    LongPrototype.rotateRight = function rotateRight(numBits) {\r\n      var b;\r\n      if (isLong(numBits)) numBits = numBits.toInt();\r\n      if ((numBits &= 63) === 0) return this;\r\n      if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\r\n      if (numBits < 32) {\r\n        b = 32 - numBits;\r\n        return fromBits(\r\n          (this.high << b) | (this.low >>> numBits),\r\n          (this.low << b) | (this.high >>> numBits),\r\n          this.unsigned,\r\n        );\r\n      }\r\n      numBits -= 32;\r\n      b = 32 - numBits;\r\n      return fromBits(\r\n        (this.low << b) | (this.high >>> numBits),\r\n        (this.high << b) | (this.low >>> numBits),\r\n        this.unsigned,\r\n      );\r\n    };\r\n    /**\r\n     * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Rotated Long\r\n     */\r\n    LongPrototype.rotr = LongPrototype.rotateRight;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @this {!Long}\r\n     * @returns {!Long} Signed long\r\n     */\r\n    LongPrototype.toSigned = function toSigned() {\r\n      if (!this.unsigned) return this;\r\n      return fromBits(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @this {!Long}\r\n     * @returns {!Long} Unsigned long\r\n     */\r\n    LongPrototype.toUnsigned = function toUnsigned() {\r\n      if (this.unsigned) return this;\r\n      return fromBits(this.low, this.high, true);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its byte representation.\r\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n     * @this {!Long}\r\n     * @returns {!Array.<number>} Byte representation\r\n     */\r\n    LongPrototype.toBytes = function toBytes(le) {\r\n      return le ? this.toBytesLE() : this.toBytesBE();\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its little endian byte representation.\r\n     * @this {!Long}\r\n     * @returns {!Array.<number>} Little endian byte representation\r\n     */\r\n    LongPrototype.toBytesLE = function toBytesLE() {\r\n      var hi = this.high,\r\n        lo = this.low;\r\n      return [\r\n        lo & 0xff,\r\n        (lo >>> 8) & 0xff,\r\n        (lo >>> 16) & 0xff,\r\n        lo >>> 24,\r\n        hi & 0xff,\r\n        (hi >>> 8) & 0xff,\r\n        (hi >>> 16) & 0xff,\r\n        hi >>> 24,\r\n      ];\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its big endian byte representation.\r\n     * @this {!Long}\r\n     * @returns {!Array.<number>} Big endian byte representation\r\n     */\r\n    LongPrototype.toBytesBE = function toBytesBE() {\r\n      var hi = this.high,\r\n        lo = this.low;\r\n      return [\r\n        hi >>> 24,\r\n        (hi >>> 16) & 0xff,\r\n        (hi >>> 8) & 0xff,\r\n        hi & 0xff,\r\n        lo >>> 24,\r\n        (lo >>> 16) & 0xff,\r\n        (lo >>> 8) & 0xff,\r\n        lo & 0xff,\r\n      ];\r\n    };\r\n\r\n    /**\r\n     * Creates a Long from its byte representation.\r\n     * @param {!Array.<number>} bytes Byte representation\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n     * @returns {Long} The corresponding Long value\r\n     */\r\n    Long.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n      return le\r\n        ? Long.fromBytesLE(bytes, unsigned)\r\n        : Long.fromBytesBE(bytes, unsigned);\r\n    };\r\n\r\n    /**\r\n     * Creates a Long from its little endian byte representation.\r\n     * @param {!Array.<number>} bytes Little endian byte representation\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @returns {Long} The corresponding Long value\r\n     */\r\n    Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n      return new Long(\r\n        bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),\r\n        bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),\r\n        unsigned,\r\n      );\r\n    };\r\n\r\n    /**\r\n     * Creates a Long from its big endian byte representation.\r\n     * @param {!Array.<number>} bytes Big endian byte representation\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n     * @returns {Long} The corresponding Long value\r\n     */\r\n    Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n      return new Long(\r\n        (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],\r\n        (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],\r\n        unsigned,\r\n      );\r\n    };\r\n\r\n    // Support conversion to/from BigInt where available\r\n    if (typeof BigInt === \"function\") {\r\n      /**\r\n       * Returns a Long representing the given big integer.\r\n       * @function\r\n       * @param {number} value The big integer value\r\n       * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n       * @returns {!Long} The corresponding Long value\r\n       */\r\n      Long.fromBigInt = function fromBigInt(value, unsigned) {\r\n        var lowBits = Number(BigInt.asIntN(32, value));\r\n        var highBits = Number(BigInt.asIntN(32, value >> BigInt(32)));\r\n        return fromBits(lowBits, highBits, unsigned);\r\n      };\r\n\r\n      // Override\r\n      Long.fromValue = function fromValueWithBigInt(value, unsigned) {\r\n        if (typeof value === \"bigint\") return Long.fromBigInt(value, unsigned);\r\n        return fromValue(value, unsigned);\r\n      };\r\n\r\n      /**\r\n       * Converts the Long to its big integer representation.\r\n       * @this {!Long}\r\n       * @returns {bigint}\r\n       */\r\n      LongPrototype.toBigInt = function toBigInt() {\r\n        var lowBigInt = BigInt(this.low >>> 0);\r\n        var highBigInt = BigInt(this.unsigned ? this.high >>> 0 : this.high);\r\n        return (highBigInt << BigInt(32)) | lowBigInt;\r\n      };\r\n    }\r\n    var _default = (_exports.default = Long);\r\n  },\r\n);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/long/umd/index.js\n");

/***/ })

};
;